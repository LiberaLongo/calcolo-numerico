"""
Risoluzione di sistemi lineari con matrice simmetrica e definita positiva.
Scrivere uno script Python che:
"""
import numpy as np
import scipy.linalg
import matplotlib.pyplot as plt

END = 13

def solve_cholesky(n, A):    
    '''
    (a) crea un problema test di dimensione variabile n
    la cui soluzione esatta sia il vettore x di tutti elementi unitari
    e b il termine noto ottenuto moltiplicando la matrice A per la soluzione x.
    '''
    x = np.ones((n, 1))
    b = np.dot(A, x) # b = A @ x
    #print('b = A @ x = \n', b)
    '''(b) calcola il numero di condizione (o una stima di esso)'''
    condA = np.linalg.cond(A, p=2)
    print('condA: ', condA)
    '''(c) risolve il sistema lineare Ax = b
    con la fattorizzazione di Cholesky..'''
    L = scipy.linalg.cholesky(A, lower=True)
    #print('L: ', L, '\n')
    B = np.matmul(L, np.transpose(L)) #(L) inferiore per (L.T) superiore
    #print('L.T*L =', B)
    err = scipy.linalg.norm(A-B, 'fro')
    print('err = ', err)
    y = scipy.linalg.solve(L, b)      # L y = b
    my_x = scipy.linalg.solve(L.T, y) # L.T my_x = y
    #print('my_x = \n', my_x)
    norm = scipy.linalg.norm(x-my_x, 2)
    print('norm =', norm)
    return (condA, norm)

'''Problemi test
• matrice di Hilbert di dimensione n (con n variabile fra 2 e 15)
'''
print('HILBERT')
K_A_Hilbert = np.zeros((END-1, 1))
Err_Hilbert = np.zeros((END-1, 1))

for n in np.arange(2, END):
    print('\nn = ', n)
    #A matrice di Hilbert
    A_Hilbert = scipy.linalg.hilbert(n)
    #print('A = \n', A)
    (K_A_Hilbert[n-2], Err_Hilbert[n-2]) = solve_cholesky(n, A_Hilbert)


'''Problemi test
• matrice tridiagonale simmetrica e definita positiva avente sulla diagonale elementi uguali a 9 e
quelli sopra e sottodiagonali uguali a -4.
'''
print('\n\nTRIDIAGONALE')
K_A_Tridiagonale = np.zeros((END-1, 1))
Err_Tridiagonale = np.zeros((END-1, 1))

for n in np.arange(2, END):
    print('\nn = ', n)
    #A è la matrice tridiagonale descrkitta sopra.
    A_Tridiagonale = np.diag(9*np.ones(n)) + np.diag(-4*np.ones(n-1), k=-1) + np.diag(-4*np.ones(n-1), k=+1)
    #print('A = \n', A)
    (K_A_Tridiagonale[n-2], Err_Tridiagonale[n-2]) = solve_cholesky(n, A_Tridiagonale)


'''
Per ogni problema test:
• Disegna il grafico del numero di condizione in funzione della dimensione del sistema
• Disegna il grafico dell’errore in norma 2 in funzione della dimensione del sistema
'''

# grafico del numero di condizione vs dim
points = END-1                                   #numero di punti da plottare (30 - 10 = 20)
dim_matri_x = np.linspace(2, END, points)        # Generate n points uniformly spaced in [-pi, pi]
plt.plot(dim_matri_x, K_A_Hilbert)
plt.title('HILBERT, CONDIZIONAMENTO DI A ')
plt.xlabel('dimensione matrice: n')
plt.ylabel('K(A)')
plt.show()

# grafico errore in norma 2 in funzione della dimensione del sistema
plt.plot(dim_matri_x, Err_Hilbert)
plt.title('HILBERT, Errore relativo')
plt.xlabel('dimensione matrice: n')
plt.ylabel('Err= ||my_x-x||/||x||')
plt.show()

# grafico del numero di condizione vs dim
plt.plot(dim_matri_x, K_A_Tridiagonale)
plt.title('MATRICE TRIDIAGONALE, CONDIZIONAMENTO DI A ')
plt.xlabel('dimensione matrice: n')
plt.ylabel('K(A)')
plt.show()
# grafico errore in norma 2 in funzione della dimensione del sistema
plt.plot(dim_matri_x, Err_Tridiagonale)
plt.title('MATRICE TRIDIAGONALE, Errore relativo')
plt.xlabel('dimensione matrice: n')
plt.ylabel('Err= ||my_x-x||/||x||')
plt.show()
HILBERT

n =  2
condA:  19.281470067903967
err =  0.0
norm = 8.95090418262362e-16

n =  3
condA:  524.0567775860627
err =  0.0
norm = 1.2483963016114961e-14

n =  4
condA:  15513.738738929038
err =  3.925231146709438e-17
norm = 1.336269524179799e-13

n =  5
condA:  476607.25024100044
err =  3.925231146709438e-17
norm = 3.366877069288704e-11

n =  6
condA:  14951058.641453395
err =  4.163336342344337e-17
norm = 8.30647784111889e-10

n =  7
condA:  475367356.9114392
err =  4.163336342344337e-17
norm = 6.025367576118558e-09

n =  8
condA:  15257575566.627958
err =  2.4037033579794548e-17
norm = 2.3842186184398364e-07

n =  9
condA:  493153404551.01215
err =  3.1031676915590914e-17
norm = 2.280345797605329e-05

n =  10
condA:  16025028168113.176
err =  3.671717528720129e-17
norm = 0.001228321941973976

n =  11
condA:  522020733204514.75
err =  4.8074067159589095e-17
norm = 0.022147345492894276

n =  12
condA:  1.6211639047474996e+16
err =  4.906538933386797e-17
norm = 0.7672951668700342


TRIDIAGONALE

n =  2
condA:  2.6000000000000005
err =  1.7763568394002505e-15
norm = 3.1401849173675503e-16

n =  3
condA:  4.384150540629853
err =  2.5121479338940403e-15
norm = 3.8459253727671276e-16

n =  4
condA:  6.120636109999739
err =  0.0
norm = 5.874748045952207e-16

n =  5
condA:  7.68811085287755
err =  1.7763568394002505e-15
norm = 5.874748045952207e-16

n =  6
condA:  9.043247020775546
err =  1.7763568394002505e-15
norm = 5.874748045952207e-16

n =  7
condA:  10.187324831204807
err =  1.7763568394002505e-15
norm = 4.965068306494546e-16

n =  8
condA:  11.141988136373694
err =  3.552713678800501e-15
norm = 5.438959822042073e-16

n =  9
condA:  11.93523592880249
err =  3.607797795906347e-15
norm = 5.438959822042073e-16

n =  10
condA:  12.594588998048039
err =  4.021398830883446e-15
norm = 1.0877919644084146e-15

n =  11
condA:  13.144345040500934
err =  4.021398830883446e-15
norm = 1.2755491433176288e-15

n =  12
condA:  13.60487175953799
err =  4.021398830883446e-15
norm = 1.3506446028928515e-15




se END = 15 Hilbert fa anche:

n =  14
condA:  2.5514988483782115e+17
Traceback (most recent call last):

  Input In [1] in <cell line: 44>
    (K_A_Hilbert[n-2], Err_Hilbert[n-2]) = solve_cholesky(n, A_Hilbert)

  Input In [1] in solve_cholesky
    L = scipy.linalg.cholesky(A, lower=True)

  File ~/anaconda3/lib/python3.9/site-packages/scipy/linalg/decomp_cholesky.py:88 in cholesky
    c, lower = _cholesky(a, lower=lower, overwrite_a=overwrite_a, clean=True,

  File ~/anaconda3/lib/python3.9/site-packages/scipy/linalg/decomp_cholesky.py:37 in _cholesky
    raise LinAlgError("%d-th leading minor of the array is not positive "

LinAlgError: 14-th leading minor of the array is not positive definite


